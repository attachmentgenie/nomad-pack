name: build_test

# We now default to running this workflow on every push to every branch.
# This provides fast feedback when build issues occur, so they can be
# fixed prior to being merged to the main branch.
#
# If you want to opt out of this, and only run the build on certain branches
# please refer to the documentation on branch filtering here:
#
#   https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#onpushbranchestagsbranches-ignoretags-ignore
#
on: [workflow_dispatch, push]

env:
  PKG_NAME: "nomad-pack"

jobs:
  get_build_info:
    name: "Set Common Build Variables"
    runs-on: ubuntu-latest
    outputs:
      go_version: ${{ steps.get_go_version.outputs.go_version }}
      product_version: ${{ steps.get_product_version.outputs.product_version }}
      repo_name: ${{ steps.get_repo_name.outputs.repo_name }}
    steps:
      - uses: actions/checkout@v3
      - name: get go version
        id: get_go_version
        # We use .go-version as our source of truth for current Go
        # version, because "goenv" can react to it automatically.
        run: |
          if [[ ! -f .go-version ]] ; then
            echo "::error::File not found: .go-version"
            exit 1
          fi
          echo "Building with Go $(cat .go-version)"
          echo "::set-output name=go_version::$(cat .go-version)"
      - name: get product version
        id: get_product_version
        run: |
          make version
          if [[ $? -ne 0 ]] ; then
            echo "::error::make version exited with non-zero exit code."
            exit 1
          fi
          echo "::set-output name=product_version::$(make version)"
      - name: get repo name without owner
        id: get_repo_name
        run: |
          echo $GITHUB_REPOSITORY | sed "s_$GITHUB_REPOSITORY_OWNER/__g"  
          echo "::set-output name=repo_name::$(echo $GITHUB_REPOSITORY | sed "s_$GITHUB_REPOSITORY_OWNER/__g")"

  build_linux:
    needs:
      - get_build_info
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux]
        goarch: ["amd64"]

      fail-fast: true

    name: Go ${{ needs.get_build_info.outputs.go_version }} ${{ matrix.goos }} ${{ matrix.goarch }} build

    steps:
      - uses: actions/checkout@v2

      - name: Setup Go ${{  needs.get_build_info.outputs.go_version }}
        uses: actions/setup-go@v2
        with:
          go-version: ${{  needs.get_build_info.outputs.go_version }}

      - name: Build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          mkdir -p dist out
          go build -o dist/ .
          zip -r -j out/${{ env.PKG_NAME }}_${{ needs.get_build_info.outputs.product_version }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip dist/

      - uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PKG_NAME }}_${{ needs.get_build_info.outputs.product_version }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip
          path: out/${{ env.PKG_NAME }}_${{ needs.get_build_info.outputs.product_version }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip

      - name: Package
        if: ${{ matrix.goos == 'linux' }}
        uses: hashicorp/actions-packaging-linux@v1
        with:
          name: "nomad-pack"
          description: "nomad-pack is a job specification packaging engine for HashiCorp Nomad."
          arch: ${{ matrix.goarch }}
          version: ${{ needs.get_build_info.outputs.product_version }}
          maintainer: "HashiCorp"
          homepage: "https://github.com/hashicorp/nomad-pack"
          license: "MPL-2.0"
          binary: "dist/${{ env.PKG_NAME }}"
          deb_depends: "openssl,git"
          rpm_depends: "openssl,git"

      - name: Set Package Names
        if: ${{ matrix.goos == 'linux' }}
        run: |
          echo "RPM_PACKAGE=$(basename out/*.rpm)" >> $GITHUB_ENV
          echo "DEB_PACKAGE=$(basename out/*.deb)" >> $GITHUB_ENV

      - uses: actions/upload-artifact@v2
        if: ${{ matrix.goos == 'linux' }}
        with:
          name: ${{ env.RPM_PACKAGE }}
          path: out/${{ env.RPM_PACKAGE }}

      - uses: actions/upload-artifact@v2
        with:
          name: ${{ env.DEB_PACKAGE }}
          path: out/${{ env.DEB_PACKAGE }}

  build_docker_default:
    name: Docker ${{ matrix.arch }} default release build
    needs:
      - get_build_info
      - build_linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: ["amd64"]
    steps:
      - uses: actions/checkout@v2
      - name: Docker Build (Action)
        uses: hashicorp/actions-docker-build@v1

        with:
          smoke_test: |
            TEST_VERSION="$(docker run "${IMAGE_NAME}" | awk '/Nomad Pack/{print $3}')"
            if [ "${TEST_VERSION#v}" != "${version}" ]; then
              echo "Test FAILED"
              exit 1
            fi
            echo "Test PASSED"
          version: ${{ needs.get_build_info.outputs.product_version }}
          target: release-default
          arch: ${{ matrix.arch }}
          tags: |
            docker.io/hashicorp/${{needs.get_build_info.outputs.repo_name}}:${{needs.get_build_info.outputs.product_version}}
            986891699432.dkr.ecr.us-east-1.amazonaws.com/hashicorp/${{needs.get_build_info.outputs.repo_name}}:${{needs.get_build_info.outputs.product_version}}
          dev_tags: |
            ${{ format('hashicorppreview/{0}:{1}-dev', needs.get_build_info.outputs.repo_name, needs.get_build_info.outputs.product_version) }}
            ${{ format('docker.io/hashicorppreview/{0}:{1}-{2}', needs.get_build_info.outputs.repo_name, needs.get_build_info.outputs.product_version, github.sha) }}
